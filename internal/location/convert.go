package location

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// This package is using the official swiss post API to convert a zip code to a location and vice versa.

const API_URL = "https://swisspost.opendatasoft.com/api/records/1.0/search/?dataset=plz_verzeichnis_v2&&rows=1&facet=postleitzahl&facet=ortbez18&q=%s"

// Convert a zip code to a location
func ZipToName(zip string) (n string, err error) {

	// Fetch the location from the API
	r, err := http.Get(fmt.Sprintf(API_URL, zip))
	// Check for errors
	if err != nil {
		err = fmt.Errorf("Error fetching location: %s", err)
		return n, err
	}
	// Close the body when we're done with it
	defer r.Body.Close()

	// Decode the JSON respons
	var a AutoGenerated
	err = json.NewDecoder(r.Body).Decode(&a)
	if err != nil {
		fmt.Println(err)
		return
	}
	// Return the location
	return a.Records[0].Fields.Ortbez18, nil

}

type AutoGenerated struct {
	Nhits      int `json:"nhits"`
	Parameters struct {
		Dataset  string   `json:"dataset"`
		Q        string   `json:"q"`
		Rows     int      `json:"rows"`
		Start    int      `json:"start"`
		Facet    []string `json:"facet"`
		Format   string   `json:"format"`
		Timezone string   `json:"timezone"`
	} `json:"parameters"`
	Records []struct {
		Datasetid string `json:"datasetid"`
		Recordid  string `json:"recordid"`
		Fields    struct {
			Ortbez27     string    `json:"ortbez27"`
			GeoPoint2D   []float64 `json:"geo_point_2d"`
			PlzCoff      string    `json:"plz_coff"`
			RecArt       string    `json:"rec_art"`
			Sprachcode   int       `json:"sprachcode"`
			Bfsnr        int       `json:"bfsnr"`
			Kanton       string    `json:"kanton"`
			GiltAbDat    string    `json:"gilt_ab_dat"`
			Onrp         int       `json:"onrp"`
			Postleitzahl string    `json:"postleitzahl"`
			Gplz         int       `json:"gplz"`
			PlzBriefzust int       `json:"plz_briefzust"`
			Ortbez18     string    `json:"ortbez18"`
			BriefzDurch  int       `json:"briefz_durch"`
			PlzZz        string    `json:"plz_zz"`
			GeoShape     struct {
				Coordinates [][][]float64 `json:"coordinates"`
				Type        string        `json:"type"`
			} `json:"geo_shape"`
			PlzTyp int `json:"plz_typ"`
		} `json:"fields"`
		Geometry struct {
			Type        string    `json:"type"`
			Coordinates []float64 `json:"coordinates"`
		} `json:"geometry"`
		RecordTimestamp time.Time `json:"record_timestamp"`
	} `json:"records"`
	FacetGroups []struct {
		Name   string `json:"name"`
		Facets []struct {
			Name  string `json:"name"`
			Count int    `json:"count"`
			State string `json:"state"`
			Path  string `json:"path"`
		} `json:"facets"`
	} `json:"facet_groups"`
}
